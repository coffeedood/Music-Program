import os
import shutil
import tkinter as tk
from tkinter import filedialog
from urllib.parse import unquote, urlparse
import pygame
from tkinter import filedialog, messagebox, scrolledtext
MAX_FILENAME_LENGTH = 215  # Maximum length for playlist filenames



def set_directories():
            import os
            import urllib.parse
            import tkinter as tk
            from tkinter import filedialog, messagebox, scrolledtext
            from natsort import natsorted
            import os
            import tkinter as tk
            from tkinter import filedialog, messagebox
            import urllib.parse
            from natsort import natsorted  # You may need to install this package: pip install natsort
            import string  # Import string module for character validation

            import os
            import tkinter as tk
            from tkinter import filedialog, messagebox
            import urllib.parse
            from natsort import natsorted  # You may need to install this package: pip install natsort
            import string  # Import string module for character validation

            MAX_FILENAME_LENGTH = 215  # Maximum length for playlist filenames

            import os
            import tkinter as tk
            from tkinter import filedialog, messagebox
            import urllib.parse
            from natsort import natsorted  # You may need to install this package: pip install natsort
            import string  # Import string module for character validation
            import os
            import re
            import urllib.parse
            import string
            import tkinter as tk
            from tkinter import filedialog, scrolledtext, messagebox
            from natsort import natsorted
            import pygame

            MAX_FILENAME_LENGTH = 215  # Maximum length for playlist filenames

            class MusicPlaylistGenerator:
                def __init__(self):
                    self.music_source_dir = ""
                    self.playlist_dest_dir = ""

                def set_directories(self, music_source_dir, playlist_dest_dir):
                    self.music_source_dir = music_source_dir
                    self.playlist_dest_dir = playlist_dest_dir

                def create_artist_playlists_from_folder(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        artist_playlists = {}

                        # Walk through the music source directory
                        for root, dirs, files in os.walk(self.music_source_dir):
                            for file in files:
                                if file.lower().endswith('.aif') or file.lower().endswith('.aif'):
                                    artist_name = os.path.basename(os.path.dirname(root))
                                    if artist_name not in artist_playlists:
                                        artist_playlists[artist_name] = []

                                    song_path = os.path.abspath(os.path.join(root, file))
                                    encoded_path = urllib.parse.quote(song_path)

                                    # Add the song to the artist's playlist
                                    artist_playlists[artist_name].append(f'file:///{encoded_path}')

                        # Create or update playlists for each artist
                        for artist_name, songs in artist_playlists.items():
                            # Sort songs naturally
                            songs = natsorted(songs)

                            # Create the playlist title and file name
                            playlist_title = f'{artist_name}'
                            playlist_name = self.sanitize_playlist_name(playlist_title)
                            playlist_name = playlist_name[:MAX_FILENAME_LENGTH - len('.m3u')]
                            playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')

                            # Write playlist file
                            with open(playlist_path, 'w', encoding='utf-8') as playlist_file:
                                for song in songs:
                                    playlist_file.write(f'# Song: {os.path.basename(urllib.parse.unquote(song))}\n')
                                    playlist_file.write(f'{song}\n')

                            print(f"Written artist playlist to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating artist playlists: {e}")
                        return False

                def create_album_playlists_from_folder(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aif', '.aif')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                songs = natsorted(songs)

                                playlist_title = f'{album_name} {artist_name}'
                                playlist_name = self.sanitize_playlist_name(playlist_title)
                                playlist_name = playlist_name[:MAX_FILENAME_LENGTH - len('.m3u')]

                                song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                    for song in songs:
                                        title = os.path.splitext(song)[0]
                                        encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, song)))
                                        song_playlist_file.write(f'# Song: {title}\n')
                                        song_playlist_file.write(f'file:///{encoded_path}\n')
                                        self.create_individual_song_playlist(title, os.path.abspath(os.path.join(root, song)))
                                print(f"Written album playlist to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating album playlists: {e}")
                        return False

                

                def create_song_playlists_from_folder(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aif', '.aif')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                # Sort the songs using natural sorting
                                songs = natsorted(songs)

                                for i, song in enumerate(songs):
                                    title = os.path.splitext(song)[0]
                                    playlist_title = f'{title} {album_name} {artist_name}appended'
                                    playlist_name = playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]

                                    song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                        for next_song in songs[i:] + songs[:i]:
                                            next_title = os.path.splitext(next_song)[0]
                                            next_playlist_title = f'{next_title} {album_name} {artist_name}appended'
                                            next_playlist_name = next_playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]
                                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, next_song)))

                                            song_playlist_file.write(f'# Song: {next_title}\n')
                                            song_playlist_file.write(f'file:///{encoded_path}\n')

                                        print(f"Written to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating song playlists: {e}")
                        return False
                
                def create_song_playlists_from_folder2(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aif', '.aif')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                # Sort the songs using natural sorting
                                songs = natsorted(songs)

                                for i, song in enumerate(songs):
                                    title = os.path.splitext(song)[0]
                                    playlist_title = f'{title} {album_name} {artist_name}'
                                    playlist_name = playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]

                                    song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                        for next_song in songs[i:] + songs[:i]:
                                            next_title = os.path.splitext(next_song)[0]
                                            next_playlist_title = f'{next_title} {album_name} {artist_name}'
                                            next_playlist_name = next_playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]
                                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, next_song)))

                                            song_playlist_file.write(f'# Song: {next_title}\n')
                                            song_playlist_file.write(f'file:///{encoded_path}\n')

                                        print(f"Written to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating song playlists: {e}")
                        return False
                def create_song_playlists_from_folder3(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aif', '.aif')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                # Sort the songs using natural sorting
                                songs = natsorted(songs)

                                for i, song in enumerate(songs):
                                    title = os.path.splitext(song)[0]
                                    playlist_title = f'{title}appended'
                                    playlist_name = playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]

                                    song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                        for next_song in songs[i:] + songs[:i]:
                                            next_title = os.path.splitext(next_song)[0]
                                            next_playlist_title = f'{next_title}appended'
                                            next_playlist_name = next_playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]
                                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, next_song)))

                                            song_playlist_file.write(f'# Song: {next_title}\n')
                                            song_playlist_file.write(f'file:///{encoded_path}\n')

                                        print(f"Written to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating song playlists: {e}")
                        return False
                def create_song_playlists_from_folder4(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aif', '.aif')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                # Sort the songs using natural sorting
                                songs = natsorted(songs)

                                for i, song in enumerate(songs):
                                    title = os.path.splitext(song)[0]
                                    playlist_title = f'{title} {album_name}appended'
                                    playlist_name = playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]

                                    song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                        for next_song in songs[i:] + songs[:i]:
                                            next_title = os.path.splitext(next_song)[0]
                                            next_playlist_title = f'{next_title} {album_name}appended'
                                            next_playlist_name = next_playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]
                                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, next_song)))

                                            song_playlist_file.write(f'# Song: {next_title}\n')
                                            song_playlist_file.write(f'file:///{encoded_path}\n')

                                        print(f"Written to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating song playlists: {e}")
                        return False

                def create_song_playlists_from_folder5(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aiff', '.aiff')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                # Sort the songs using natural sorting
                                songs = natsorted(songs)

                                for i, song in enumerate(songs):
                                    title = os.path.splitext(song)[0]
                                    playlist_title = f'{title} {album_name} {artist_name}appended'
                                    playlist_name = playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]

                                    song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                        for next_song in songs[i:] + songs[:i]:
                                            next_title = os.path.splitext(next_song)[0]
                                            next_playlist_title = f'{next_title} {album_name} {artist_name}appended'
                                            next_playlist_name = next_playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]
                                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, next_song)))

                                            song_playlist_file.write(f'# Song: {next_title}\n')
                                            song_playlist_file.write(f'file:///{encoded_path}\n')

                                        print(f"Written to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating song playlists: {e}")
                        return False
                
                def create_song_playlists_from_folder6(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aiff', '.aiff')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                # Sort the songs using natural sorting
                                songs = natsorted(songs)

                                for i, song in enumerate(songs):
                                    title = os.path.splitext(song)[0]
                                    playlist_title = f'{title} {album_name} {artist_name}'
                                    playlist_name = playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]

                                    song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                        for next_song in songs[i:] + songs[:i]:
                                            next_title = os.path.splitext(next_song)[0]
                                            next_playlist_title = f'{next_title} {album_name} {artist_name}'
                                            next_playlist_name = next_playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]
                                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, next_song)))

                                            song_playlist_file.write(f'# Song: {next_title}\n')
                                            song_playlist_file.write(f'file:///{encoded_path}\n')

                                        print(f"Written to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating song playlists: {e}")
                        return False
                def create_song_playlists_from_folder7(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aiff', '.aiff')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                # Sort the songs using natural sorting
                                songs = natsorted(songs)

                                for i, song in enumerate(songs):
                                    title = os.path.splitext(song)[0]
                                    playlist_title = f'{title}appended'
                                    playlist_name = playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]

                                    song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                        for next_song in songs[i:] + songs[:i]:
                                            next_title = os.path.splitext(next_song)[0]
                                            next_playlist_title = f'{next_title}appended'
                                            next_playlist_name = next_playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]
                                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, next_song)))

                                            song_playlist_file.write(f'# Song: {next_title}\n')
                                            song_playlist_file.write(f'file:///{encoded_path}\n')

                                        print(f"Written to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating song playlists: {e}")
                        return False
                def create_song_playlists_from_folder8(self):
                    try:
                        if not os.path.exists(self.music_source_dir) or not os.path.isdir(self.music_source_dir):
                            print(f"Error: Music source directory '{self.music_source_dir}' not found.")
                            return False

                        if not os.path.exists(self.playlist_dest_dir):
                            os.makedirs(self.playlist_dest_dir)

                        for root, dirs, files in os.walk(self.music_source_dir):
                            songs = [file for file in files if file.lower().endswith(('.aiff', '.aiff')) and not file.startswith('._')]
                            if songs:
                                artist_name = os.path.basename(os.path.dirname(root))
                                album_name = os.path.basename(root)

                                # Sort the songs using natural sorting
                                songs = natsorted(songs)

                                for i, song in enumerate(songs):
                                    title = os.path.splitext(song)[0]
                                    playlist_title = f'{title} {album_name}appended'
                                    playlist_name = playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]

                                    song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')
                                    with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                                        for next_song in songs[i:] + songs[:i]:
                                            next_title = os.path.splitext(next_song)[0]
                                            next_playlist_title = f'{next_title} {album_name}appended'
                                            next_playlist_name = next_playlist_title[:MAX_FILENAME_LENGTH - len('.m3u')]
                                            encoded_path = urllib.parse.quote(os.path.abspath(os.path.join(root, next_song)))

                                            song_playlist_file.write(f'# Song: {next_title}\n')
                                            song_playlist_file.write(f'file:///{encoded_path}\n')

                                        print(f"Written to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating song playlists: {e}")
                        return False

                def create_individual_song_playlist(self, song_title, song_path):
                    try:
                        playlist_name = self.sanitize_playlist_name(song_title)
                        playlist_name = playlist_name[:MAX_FILENAME_LENGTH - len('.m3u')]
                        song_playlist_path = os.path.join(self.playlist_dest_dir, f'{playlist_name}.m3u')

                        with open(song_playlist_path, 'w', encoding='utf-8') as song_playlist_file:
                            title = os.path.splitext(os.path.basename(song_path))[0]
                            encoded_path = urllib.parse.quote(song_path)
                            song_playlist_file.write(f'# Song: {title}\n')
                            song_playlist_file.write(f'file:///{encoded_path}\n')

                        print(f"Written individual song playlist to {playlist_name}.m3u")

                        return True

                    except Exception as e:
                        print(f"Error occurred while creating individual song playlist: {e}")
                        return False

                def sanitize_playlist_name(self, name):
                    valid_chars = '-_.() %s%s' % (string.ascii_letters, string.digits)
                    return ''.join(c for c in name if c in valid_chars)


            


            class MusicPlayerGUI(tk.Tk):
                def __init__(self):
                    super().__init__()
                    self.title("Music Playlist Generator")
                    self.geometry("600x400")

                    self.playlist_generator = MusicPlaylistGenerator()

                    # Directory selection labels and buttons
                    self.lbl_music_source = tk.Label(self, text="Select Music Source Directory:")
                    self.lbl_music_source.pack(pady=10)

                    self.btn_select_music_source = tk.Button(self, text="Select Folder", command=self.select_music_source)
                    self.btn_select_music_source.pack(pady=5)

                    self.lbl_playlist_dest = tk.Label(self, text="Select Playlist Destination Directory:")
                    self.lbl_playlist_dest.pack(pady=10)

                    self.btn_select_playlist_dest = tk.Button(self, text="Select Folder", command=self.select_playlist_dest)
                    self.btn_select_playlist_dest.pack(pady=5)

                    # Buttons for generating playlists
                    self.btn_generate_artist_playlists = tk.Button(self, text="Generate Artist Playlists", command=self.generate_artist_playlists)
                    self.btn_generate_artist_playlists.pack(pady=5)

                    self.btn_generate_album_playlists = tk.Button(self, text="Generate Album Playlists", command=self.generate_album_playlists)
                    self.btn_generate_album_playlists.pack(pady=5)

                    self.btn_generate_song_playlists = tk.Button(self, text="AIF/AIFF FILES", command=self.generate_song_playlists)
                    self.btn_generate_song_playlists.pack(pady=5)

                    self.btn_generate_song_playlists = tk.Button(self, text="AIF/AIFF FILES222", command=self.generate_song_playlists2)
                    self.btn_generate_song_playlists.pack(pady=5)

                    self.txt_output = scrolledtext.ScrolledText(self, width=70, height=10)
                    self.txt_output.pack(pady=10)

                # Method to generate all playlists


                def select_music_source(self):
                    self.music_source_dir = filedialog.askdirectory()
                    if self.music_source_dir:
                        self.lbl_music_source.config(text=f"Music Source Directory: {self.music_source_dir}")
                        self.playlist_generator.music_source_dir = self.music_source_dir

                def select_playlist_dest(self):
                    self.playlist_dest_dir = filedialog.askdirectory()
                    if self.playlist_dest_dir:
                        self.lbl_playlist_dest.config(text=f"Playlist Destination Directory: {self.playlist_dest_dir}")
                        self.playlist_generator.playlist_dest_dir = self.playlist_dest_dir

                def generate_artist_playlists(self):
                    success = self.playlist_generator.create_artist_playlists_from_folder()
                    self.log_output("Artist playlists generated successfully." if success else "Failed to generate artist playlists.")

                def generate_album_playlists(self):
                    success = self.playlist_generator.create_album_playlists_from_folder()
                    self.log_output("Album playlists generated successfully." if success else "Failed to generate album playlists.")
                


                #generates playlists for all AIF FILES!!!
                def generate_song_playlists(self):
                    success = self.playlist_generator.create_artist_playlists_from_folder()
                    self.log_output("Artist playlists generated successfully." if success else "Failed to generate artist playlists.")
                    # Generate song playlists from multiple folders if needed, without message boxes
                    
                    success5 = self.playlist_generator.create_album_playlists_from_folder()
                    self.log_output("Album playlists generated successfully." if success5 else "Failed to generate album playlists.")



                    success1 = self.playlist_generator.create_song_playlists_from_folder()
                    self.log_output("Song playlists (Folder 1) generated successfully." if success1 else "Failed to generate song playlists (Folder 1).")

                    success2 = self.playlist_generator.create_song_playlists_from_folder2()
                    self.log_output("Song playlists (Folder 2) generated successfully." if success2 else "Failed to generate song playlists (Folder 2).")

                    success3 = self.playlist_generator.create_song_playlists_from_folder3()
                    self.log_output("Song playlists (Folder 3) generated successfully." if success3 else "Failed to generate song playlists (Folder 3).")

                    success4 = self.playlist_generator.create_song_playlists_from_folder4()
                    self.log_output("Song playlists (Folder 4) generated successfully." if success4 else "Failed to generate song playlists (Folder 4).")

                def generate_song_playlists2(self):
                    # Generate song playlists from multiple folders if needed, without message boxes
                    success1 = self.playlist_generator.create_song_playlists_from_folder5()
                    self.log_output("Song playlists (Folder 1) generated successfully." if success1 else "Failed to generate song playlists (Folder 1).")

                    success2 = self.playlist_generator.create_song_playlists_from_folder6()
                    self.log_output("Song playlists (Folder 2) generated successfully." if success2 else "Failed to generate song playlists (Folder 2).")

                    success3 = self.playlist_generator.create_song_playlists_from_folder7()
                    self.log_output("Song playlists (Folder 3) generated successfully." if success3 else "Failed to generate song playlists (Folder 3).")

                    success4 = self.playlist_generator.create_song_playlists_from_folder8()
                    self.log_output("Song playlists (Folder 4) generated successfully." if success4 else "Failed to generate song playlists (Folder 4).")

                def log_output(self, message):
                    self.txt_output.insert(tk.END, message + '\n')
                    self.txt_output.yview(tk.END)


            if __name__ == "__main__":
                pygame.mixer.init()
                app = MusicPlayerGUI()
                app.mainloop()

set_directories()
